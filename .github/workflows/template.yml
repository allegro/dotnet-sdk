on:
  workflow_call:
    inputs:
      publish:
        required: false
        type: boolean
        default: false
      projectName:
        required: true
        type: string
      tagName:
        required: false
        type: string
    secrets:
      SM_CLIENT_CERT_PASSWORD:
        required: false
      SM_CLIENT_CERT_FILE_B64:
        required: false
      SM_HOST:
        required: false
      SM_API_KEY:
        required: false
      SM_CODE_SIGNING_CERT_SHA1_HASH:
        required: false
      nugetApiKey:
        required: false
jobs:
  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: src/${{ inputs.projectName }}
    outputs:
      nupkgFilename: ${{ steps.nupkg.outputs.filename }}
    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: |
          6.0.x
          8.0.x
    - name: Restore dependencies
      run: dotnet restore
    - name: Build
      run: dotnet build -c Release --no-restore
    - name: Test
      run: dotnet test -c Release --no-build --verbosity normal
    - name: Pack
      run: dotnet pack -v normal -c Release --no-build --include-symbols --include-source -o package
    # - name: Verify package name & version
    #   id: nupkg
    #   if: inputs.publish
    #   run: |
    #     TAG_NAME=${{ inputs.tagName }}
    #     VERSION=${TAG_NAME##*v}
    #     NUPKG="${{ inputs.projectName }}.${VERSION}.nupkg"
    #     echo "::set-output name=filename::$NUPKG"
    #     if [ ! -f package/$NUPKG ]; then
    #       echo "File '$NUPKG' does not exist";
    #       exit 1;
    #     fi
    - uses: actions/upload-artifact@v3
      if: inputs.publish
      with:
        name: package
        path: src/${{ inputs.projectName }}/package
  publish:
    runs-on: windows-latest
    if: inputs.publish
    needs: [build]
    steps:
    - uses: actions/download-artifact@v3
      with:
        name: package
        path: unsigned
    - name: NuGet Install 
      uses: NuGet/setup-nuget@v1.0.5 
      with: 
        nuget-version: latest 
    - name: Set up certificate 
      run: | 
        echo "${{ secrets.SM_CLIENT_CERT_FILE_B64 }}" | base64 --decode > /d/Certificate_pkcs12.p12 
      shell: bash
    - name: Set variables 
      id: variables 
      run: | 
        echo "::set-output name=version::${GITHUB_REF#refs/tags/v}" 
        echo "SM_HOST=${{ secrets.SM_HOST }}" >> "$GITHUB_ENV" 
        echo "SM_API_KEY=${{ secrets.SM_API_KEY }}" >> "$GITHUB_ENV" 
        echo "SM_CLIENT_CERT_FILE=D:\\Certificate_pkcs12.p12" >> "$GITHUB_ENV" 
        echo "SM_CLIENT_CERT_PASSWORD=${{ secrets.SM_CLIENT_CERT_PASSWORD }}" >> "$GITHUB_ENV" 
        echo "C:\Program Files (x86)\Windows Kits\10\App Certification Kit" >> $GITHUB_PATH 
        echo "C:\Program Files (x86)\Microsoft SDKs\Windows\v10.0A\bin\NETFX 4.8 Tools" >> $GITHUB_PATH 
        echo "C:\Program Files\DigiCert\DigiCert One Signing Manager Tools" >> $GITHUB_PATH 
      shell: bash
    - name: Setup SSM KSP on windows latest 
      run: | 
        curl -X GET  https://one.digicert.com/signingmanager/api-ui/v1/releases/smtools-windows-x64.msi/download -H "x-api-key:%SM_API_KEY%" -o smtools-windows-x64.msi 
        msiexec /i smtools-windows-x64.msi /quiet /qn 
        smksp_registrar.exe list 
        smctl.exe keypair ls 
        C:\Windows\System32\certutil.exe -csp "DigiCert Signing Manager KSP" -key -user 
        smksp_cert_sync.exe 
      shell: cmd 
    
    # - name: Save & verify certificate
    #   run: |
    #     echo ${{ secrets.nugetCertificate }} | base64 -d > cert.p12
    #     openssl pkcs12 -in cert.p12 -nodes -legacy -passin pass:"${{ secrets.nugetCertificatePassword }}" | openssl x509 -noout -subject -legacy || echo "Certificate validation failed"
    # - name: Sign package
    #   run: dotnet nuget sign unsigned/*.nupkg --certificate-path cert.p12 --certificate-password ${{ secrets.nugetCertificatePassword }} --timestamper http://timestamp.digicert.com --output signed
    - name: Signing using Nuget 
      run: | 
        dir "%cd%\unsigned"
        nuget sign "%cd%\unsigned\*.nupkg" -Timestamper http://timestamp.digicert.com -outputdirectory "%cd%\signed" -CertificateFingerprint ${{ secrets.SM_CODE_SIGNING_CERT_SHA1_HASH }} -HashAlgorithm SHA256 -Verbosity detailed -Overwrite 
        dir %cd%\signed
        nuget verify -All "%cd%\signed\*.nupkg" 
      shell: cmd
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: |
          6.0.x
          8.0.x
    # - name: Push package
    #   run: dotnet nuget push signed/${{needs.build.outputs.nupkgFilename}} --api-key ${{ secrets.nugetApiKey }} --source https://api.nuget.org/v3/index.json
